"""Напишите функцию mul2, которая принимает число a в качестве параметра,
и возвращает это же число, умноженное на 2."""


def mul2(a):
    return a * 2


'''Напишите функцию sumPair, которая принимает числа a и b в качестве параметров, 
и возвращает сумму a и b.'''


def sum_pair(a, b):
    return a + b


'''Напишите функцию isEven, которая принимает число a в качестве параметра, и возвращает true, если a чётное, 
false если нечётное.'''


def func3(a):
    return a % 2 == 0


'''Напишите функцию endsWith47, которая принимает число a в качестве параметра, 
и возвращает true, если a заканчивается на 4 или 7, либо false в противном случае.'''


def ends_with47(a):
    return a % 10 == 4 or a % 10 == 7


print(f'endsWith47 - {ends_with47(7)}')

'''Напишите функцию includes, 
которая принимает целочисленный массив a и число x в качестве параметра, 
и возвращает true, если число x содержится в a, либо false, если не содержится.'''


def includes(a, x):
    # for i in range(len(a)):
    for i in a:
        if i == x:
            return True
    return False


print(f'includes -  {includes([1], 8)}')

'''Напишите функцию equalsArray, 
которая принимает целочисленные массивы a и b в качестве параметров, 
и возвращает true, если массивы одинаковые, false, если разные.'''


def equals_array(a, b):
    if len(a) == len(b):
        for i in range(len(a)):
            if a[i] != b[i]:
                return False
        return True
    return False


print(f'equalsArray - {equals_array([2], [3])}')
print(f'equalsArray - {equals_array([2], [2])}')
print(f'equalsArray - {equals_array([2, 3], [2])}')

'''Напишите функцию sumArray, 
которая принимает целочисленный массив a в качестве параметра, 
и возвращает сумму всех элементов массива.'''


def sum_array(a):
    s = 0
    for i in range(len(a)):
        s += a[i]
    return s


print(f'sumArray - {sum_array([2, 6, 7])}')

'''Напишите функцию maxInArray, 
которая принимает целочисленный массив a в качестве параметра, 
и возвращает самый большой элемент массива.'''


def max_in_array(a):
    m = a[0]
    for i in range(1, len(a)):
        if a[i] > m:
            m = a[i]
    return m
    # return max(a)


print(f'maxInArray - {max_in_array([5, 99, 1, 101, 4])}')

'''Напишите функцию minInArray, 
которая принимает целочисленный массив a в качестве параметра, 
и возвращает самый маленький элемент массива.'''


def min_in_array(a):
    m = a[0]
    for i in range(1, len(a)):
        if a[i] < m:
            m = a[i]
    return m
    # return min(a)


print(f'minInArray - {min_in_array([5, 99, 1, 101, 4])}')

'''Напишите функцию avgInArray, которая принимает целочисленный массив a в качестве параметра, 
и возвращает среднее арифметическое элементов массива.'''


def avg_in_array(a):
    s = 0
    for i in a:
        s += i
    return s / len(a)


print(f'avgInArray - {avg_in_array([5, 99, 1, 101, 4])}')

'''Напишите функцию forEach, 
которая принимает целочисленный массив a и функцию f в качестве параметра, 
и вызывает функцию f на каждом элементе массива. 
Ничего не возвращает. Функция f принимает число в качестве параметра и ничего не возвращает.'''


def for_each(a, f):
    for i in a:
        f(i)


'''Напишите функцию countByCond, 
которая принимает целочисленный массив a и функцию f в качестве параметра, 
и возвращает количество чисел в массиве, для которых f возвращает true. 
Функция f принимает целое число в качестве параметра, и возвращает true или false.'''


def f(i):  # данную функцию я создавал для самопроверки решения
    return True


def count_by_cond(a, f):
    count = 0
    for i in a:
        if f(i):
            count += 1
    return count


print(f'countByCond - {count_by_cond([1, 3, 4], f)}')
print(f'countByCond - {count_by_cond([14, 57, 72], ends_with47)}')
print(f'countByCond - {count_by_cond([14, 57, 72], func3)}')

'''Напишите функцию map, 
которая принимает целочисленный массив a и функцию f в качестве параметра, 
и возвращает новый массив, состоящий из результатов, 
возвращённых функцией f для каждого из чисел в массиве. 
Функция f принимает целое число в качестве параметра, и возвращает число.'''


def map(a, f):  # есть отличие между параметром функции и аргументом функции или это аспекты перевода ?
    # b = [0] * len(a)
    # for i in range(len(a)):
    #     b[i] = f(a[i])
    # return b
    return [f(a[i]) for i in range(len(a))]


print(f'map - {map([3, 5, 7], mul2)}')

'''Напишите функцию filter, 
которая принимает целочисленный массив a и функцию f в качестве параметра, 
и возвращает новый массив, состоящий только из тех элементов, для которых f вернула true. 
Функция f принимает целое число в качестве параметра, и возвращает true или false.'''


def f(i): # данную функцию я создавал для самопроверки решения
    return True


def filter(a, f):
    return [a[i] for i in range(len(a)) if f(a[i])]


print(f'filter - {filter([2, 4, 6, 6], ends_with47)}')
print(f'filter - {filter([2, 4, 7, 6], func3)}')

'''Напишите функцию bind, 
которая принимает функцию f и любой параметр a в качестве параметра, 
и возвращает новую функцию, которая делает то же, что и f, 
но принимает на один параметр меньше (вместо первого параметра всегда будет a).'''


def f(i):  # данную функцию я создавал для самопроверки решения
    pass


def bind(f, a):
    return f(a - 1)


# foo = bind(sum_pair, 2)
# print(foo(3))  # 5
# print(foo(7))  # 9
# bar = bind(foo, 5)
# print(bar())  # 7

'''Напишите функцию apply, 
которая принимает функцию f и любой набор параметров a в качестве параметра, 
и вызывает функцию f, передав ей a как массив. 
Функция f принимает массив в качестве параметра и что-то возвращает. 
Функция apply должна возвращать результат работы функции f.'''


def f1(i):  # данную функцию я создавал для самопроверки решения
    something = "something"
    return something


def apply(f, *a):
    return f(a)


print(f'apply - {apply(sum_array, 5, 4, 1)}')
print(f'apply - {apply(max_in_array, 5, 4, 1)}')
print(f'apply - {apply(min_in_array, 5, 4, 1)}')
print(f'apply - {apply(avg_in_array, 5, 4, 1)}')

'''Напишите функцию call, 
которая принимает функцию f и массив из произвольных элементов a в качестве параметра, 
и вызывает функцию f, передав ей все элементы a как одиночные параметры. 
Функция f принимает произвольные параметры и что-то возвращает. 
Функция call должна возвращать результат работы функции f.'''


def call(f, a):
    return f(*a)


print(f'call - {call(sum_pair, [5, 2])}')
print(f'call - {call(includes, [[6, 3, 5], 3])}')
print(f'call - {call(equals_array, [[6, 3, 5], [5, 3, 6]])}')

'''Напишите функцию reduce, 
которая принимает целочисленный массив a и функцию f в качестве параметра, 
и возвращает число. Число должно получаться следующим образом: 
создаётся переменная acc, в которую записывается первый элемент из a. 
Для каждого следующего элемента из a вызывается функция f, 
в которую передаётся acc и элемент из a. Результат работы f записывается в acc на каждом шаге. 
Функция f принимает два числа в качестве параметров и возвращает число.'''


def reduce(a, f):
    acc = a[0]
    for i in range(1, len(a)):
        acc = f(acc, a[i])
    return acc


print(reduce([5, 4, 3, 2, 1], sum_pair))
print(reduce([5, 4, 3, 2, 1], max))
print(reduce([5, 4, 3, 2, 1], lambda a, x: a * x))
